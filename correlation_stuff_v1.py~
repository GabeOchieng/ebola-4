#!/usr/bin/python

# analytics challenge ebola correlation first python program

# Library imports
import numpy as np    # np will be alias for numpy when calling numpy functions

#these are data points. for us its number of diseases in a city per year over 4 years
P = [100, 87, 76, 95]
#get standard deviation
stdP = np.std(P)
#get the mean
avgP = np.mean(P)
N = [300, 331, 320, 295]
stdN = np.std(N)
avgN = np.mean(N)
W = [78, 95, 83, 70]
stdW = np.std(W)
avgW = np.mean(W)
L = [275, 240, 220, 290]
stdL = np.std(L)
avgL = np.mean(L)

#create 1x4  empty array for z values
#wait, why do we have these? they aren't used
zP=np.zeros((1,4),dtype=int)
zN=np.zeros((1,4),dtype=int)
zW=np.zeros((1,4),dtype=int)
zL=np.zeros((1,4),dtype=int)

#create empty matrix for z values
z=np.zeros((4,4),dtype=float)

for m in range(0, 4):
    z[0][m] = (P[m]-avgP)/stdP

for m in range(0, 4):
    z[1][m] = (N[m]-avgN)/stdN

for m in range(0, 4):
    z[2][m] = (W[m]-avgW)/stdW

for m in range(0, 4):
    z[3][m] = (L[m]-avgL)/stdL

print z


#to find correlation: example
#this is the correlation coefficient of P to N since the N values looked 
#    up come after the P values

#for i in range(0, 4):
#    corr = ( z[0][i]*Z[1][i+1] + z[0][i+1]*z[1][i+2] + z[0][i+1]*z[1][i+3] ) / 4

